version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_NAME=media_scraper
      - DB_USER=root
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - DB_PORT=5432
      - REDIS_PORT=6379
      - AUTH_USERNAME=admin
      - AUTH_PASSWORD=secret
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "1.0"    # Limit to 1 CPU
          memory: "1GB"  # Limit to 1GB RAM
        reservations:
          cpus: "0.5"    # Reserve at least 0.5 CPU
          memory: "512MB" # Reserve at least 512MB

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=media_scraper
      - POSTGRES_USER=root
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d media_scraper"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  db_data:
  redis_data:

networks:
  app-network:
    driver: bridge 